# Generated by Django 3.2.15 on 2022-09-21 21:29

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('employ_id', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('nida_no', models.CharField(blank=True, max_length=25, null=True, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=13, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+255-000-000-000' ", regex='^\\+?1?\\d{9,15}$')])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Institute',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reg_no', models.CharField(max_length=20, unique=True)),
                ('institute_name', models.CharField(max_length=50)),
                ('institute_abbreviation', models.CharField(max_length=20)),
                ('institute_description', models.TextField(max_length=40)),
                ('institute_email', models.EmailField(max_length=30, unique=True)),
                ('institute_location', models.CharField(max_length=50)),
                ('post_office_address', models.CharField(max_length=20, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TSMSUserPermissions',
            fields=[
                ('permission_unique_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('permission_name', models.CharField(default='', max_length=1600)),
                ('permission_code', models.CharField(default='', max_length=1600)),
                ('permission_createddate', models.DateField(auto_now_add=True)),
                ('permission_createdby', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_permission_creator', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'User Permissions',
                'db_table': 'tsms_user_permissions',
                'ordering': ['-permission_createddate'],
            },
        ),
        migrations.CreateModel(
            name='TSMSUserRoles',
            fields=[
                ('role_unique_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('role_name', models.CharField(default='', max_length=1600)),
                ('role_description', models.CharField(default='', max_length=1600)),
                ('role_createddate', models.DateField(auto_now_add=True)),
                ('institute', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='uaa.institute')),
                ('role_createdby', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_role_creator', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'User Roles',
                'db_table': 'tsms_user_roles',
                'ordering': ['-role_createddate'],
            },
        ),
        migrations.CreateModel(
            name='TSMSUsersWithRoles',
            fields=[
                ('user_with_role_unique_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('user_with_role_createddate', models.DateField(auto_now_add=True)),
                ('user_with_role_createdby', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_with_role_creator', to=settings.AUTH_USER_MODEL)),
                ('user_with_role_role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_role_name', to='uaa.tsmsuserroles')),
                ('user_with_role_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='role_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Users with Roles',
                'db_table': 'tsms_user_with_roles',
                'ordering': ['-user_with_role_createddate'],
            },
        ),
        migrations.CreateModel(
            name='TSMSUserRolesWithPermissions',
            fields=[
                ('role_with_permission_unique_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('permission_read_only', models.BooleanField(default=True)),
                ('role_with_permission_createddate', models.DateField(auto_now_add=True)),
                ('role_with_permission_createdby', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_role_with_permission_creator', to=settings.AUTH_USER_MODEL)),
                ('role_with_permission_permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_role_with_permission_permission', to='uaa.tsmsuserpermissions')),
                ('role_with_permission_role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_role_with_permission_role', to='uaa.tsmsuserroles')),
            ],
            options={
                'verbose_name_plural': 'Roles with Permissions',
                'db_table': 'dtp_user_role_with_permissions',
                'ordering': ['-role_with_permission_createddate'],
            },
        ),
        migrations.CreateModel(
            name='TSMSUserPermissionsGroup',
            fields=[
                ('permission_group_unique_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('permission_group_name', models.CharField(default='', max_length=1600)),
                ('permission_group_description', models.CharField(default='', max_length=600, null=True)),
                ('permission_group_createddate', models.DateField(auto_now_add=True)),
                ('permission_group_createdby', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='permission_group_creator', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Permission Groups',
                'db_table': 'tsms_user_permissions_group',
                'ordering': ['-permission_group_createddate'],
            },
        ),
        migrations.AddField(
            model_name='tsmsuserpermissions',
            name='permission_group',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='permission_group', to='uaa.tsmsuserpermissionsgroup'),
        ),
        migrations.AddField(
            model_name='user',
            name='institution_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='uaa.institute'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
